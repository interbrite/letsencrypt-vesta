#!/bin/bash
# AUTOMATE LET'S ENCRYPT CERTIFICATE INSTALLATION FOR VESTACP
#
# Copyright (C) 2015 Jason R. Pitoniak.
# This code is licensed under the MIT License.  See the LICENSE.md
# file for details.
#
# This script automates the process of requesting SSL certs through
# Let's Encrypt for VestaCP sites.  Certificates are requested with
# the primary domain as the certificate common name (CN) and all
# aliases on the domain as subject-alternate names (SAN).  The
# account owner's email address is used as the contact email sent
# with the certificate request.
#
# This script requires a working VestaCP installation and the
# separate installation of the Let's Encrypt ACME client.  See the
# README.md file for more information and installation instructions.

###### SETUP ######

# You probably won't need to change anything here unless you have
# an atypical setup or you wish to change the options used with
# the Let's Encrypt client.  If your Linux distro has a Let's
# Encrypt package available, change the LETSENCRYPT_COMMAND to
# reflect its location.

#Set the command that should be used to run the letsencrypt tool
#Include any arguments that should be used by default
#(arguments shouldn't be necessary if using /etc/letsencrypt/cli.ini)
#The -m (mail) and -d (domain) options will be added automatically
LETSENCRYPT_COMMAND='/usr/local/certbot/certbot-auto 
    -t --renew-by-default --agree-tos --webroot -w /etc/letsencrypt/webroot
    --server https://acme-v01.api.letsencrypt.org/directory'

#Set the path to Vesta's installation base
#(you probably won't need to cahnge this)
VESTA_PATH='/usr/local/vesta'

#Set the path to the at command if using -a for automatic renewals
#(you probably won't need to change this either)
AT_COMMAND=/usr/bin/at

# Don't change anything below this line
###### END SETUP ######

#Global vars
#master list of all domains to be added to the certificate
ALLDOMAINS=''
#email address to use as contact with certificate request
EMAIL=''
#arrays to hold list of users and list of domains
declare -a USERLIST DOMAINLIST
#how many days out to schedule automatic renewals
RENEWALDAYS=0
#capture the original command line args to use in scheduling renewals
ORIGINALCMD="$0 $*"

# Import Vesta-specific settings, allowing this script to be called by crontab
source /etc/profile.d/vesta.sh

# get_domains_list $USER $DOMAIN
# Given a user and a domain, returns the list of all domains (main domain + aliases) associated with the site
function get_domains_list() {
    #local ALIASES=`$VESTA_PATH/bin/v-list-web-domains-alias $1 shell | grep "^$2" | cut -d " " -f2`
    local ALIASES=`$VESTA_PATH/bin/v-list-web-domain "$1" "$2" | grep ALIAS | cut -d":" -f2 | xargs`
    local ALIASES="${ALIASES// /,}"
    if [[ "$ALIASES" != "" && "$ALIASES" != "NULL" ]]
    then
        echo "$2,$ALIASES"
    else
        echo "$2"
    fi
}

# add_user_domains $USER $DOMAINS
# add a user and a list of domains to the user list
# add a site's domains and aliases to the ALLDOMAINS list which will be added to the cert
function add_user_domains() {
    local USER=$1
    shift

    #Check that the user account exits
    $VESTA_PATH/bin/v-list-user $USER >/dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
        echo "Warning: $USER is not a valid Vesta user account."
    else
        #local list of domains
        local DOMAINS=""

        #Check if specific domains were specified
        if [[ -z "$1" ]]
        then
            #no domains specified, get the list of all domains
            DOMAINS=`$VESTA_PATH/bin/v-list-web-domains $USER | tail -n+3 | cut -d " " -f1`
        else
            #working domain
            local DOMAIN

            #check that each domain actually exists
            while [[ -n $1 ]]
            do
                $VESTA_PATH/bin/v-list-web-domain $USER $1 >/dev/null 2>&1
                if [[ $? -ne 0 ]]
                then
                    echo "Warning: $1 does not exist in the $USER account."
                else
                    DOMAINS="$DOMAINS $1"
                fi
                shift
            done
        fi

        #if we have any domains, add them to the master lists
        local DOMAIN
        if [[ -n "$DOMAINS" ]]
        then
            for DOMAIN in $DOMAINS
            do
                local DOMLIST=$(get_domains_list "$USER" "$DOMAIN") 
                if [[ -n "$ALLDOMAINS" ]]
                then
                    ALLDOMAINS="$ALLDOMAINS,$DOMLIST"
                else
                    ALLDOMAINS="$DOMLIST"
                fi
            done

            #replace spaces in DOMAINS list with commas so string won't be treated as an array
            DOMAINS=`echo -n $DOMAINS | tr " " ","`

            # add user and primary domain to the master lists
            USERLIST=(${USERLIST[@]} "$USER")
            DOMAINLIST=(${DOMAINLIST[@]} "$DOMAINS")
        fi
    fi
}


if [[ $# -eq 0 ]]
then
    # no args passed, print usage info
    echo "Usage:"
    echo "$0 [-m email] [-u] user1 [domainlist1] [...-u userN [domainlistN]]"
    exit 140
else
    # are we expecting a username or a domain as the next param?
    EXPECTUSER=1
    # current username
    USER=""
    # list of domains for current user
    DOMAINS=""

    # track if script is still looping since bash doesn't support do...while
    LOOPING=1

    while [[ $LOOPING -eq 1 ]]
    do
        if [[ -z "$1" ]]
        then
            # no more parameters to parse, run through loop once more to clean up
            LOOPING=0
        fi

        if [[ "$1" == "-u" || $LOOPING -eq 0 ]]
        then
            # next parameter is a new username or we've reached the last param and are cleaning up

            # check if a current user has already been defined
            if [[ -n "$USER" ]]
            then
                # add users and domains to master lists
                add_user_domains $USER $DOMAINS
            fi

            # set expectuser flag to true
            EXPECTUSER=1
            USER=""
            DOMAINS=""
        elif [[ "$1" == "-m" ]]
        then
            # next parameter is the desired email address
            shift
            EMAIL=$1
        elif [[ "$1" == "-a" ]]
        then
            # next parameter is the number of days out to schedule an auto renewal
            shift
            RENEWALDAYS=$1
        elif [[ $EXPECTUSER -eq 1 ]]
        then
            # parameter is a username
            USER=$1
            EXPECTUSER=0
        else
            # paramater is a domain name
            DOMAINS="$DOMAINS $1"
        fi
        shift
    done
fi

# make sure there is at least one user
if [[ ${#USERLIST[@]} -eq 0 ]]
then
    echo "Error: No valid users specified."
    exit 141
fi

# make sure there is at least one domain
if [[ "$ALLDOMAINS" == "" ]]
then
    echo "Error: No valid domains specified."
    exit 142
fi

# if no email was specified, get the email of the first user
if [[ "$EMAIL" == "" ]]
then
    EMAIL=`$VESTA_PATH/bin/v-get-user-value $USERLIST CONTACT`
fi

#Call letsencrypt
#using certonly ensures that the acme client doesn't try to install the cert for us
#as we'll do that in the next step
PUNYCODE=`echo $ALLDOMAINS | sed -n 1'p' | tr ',' '\n' | while read word; do echo $word | idn; done | tr '\n' ',' | sed 's/.$//'`
echo $LETSENCRYPT_COMMAND -m $EMAIL -d $PUNYCODE certonly
$LETSENCRYPT_COMMAND -m $EMAIL -d $PUNYCODE certonly

#Check that the Let's Encrypt client exited successfully
#if not, something went wrong (it probably dumpped an error), so we should abort so as not to break things
if [[ $? -ne 0 ]]
then
    echo "Let's Encrypt returned an error status.  Aborting."
    exit 143
fi

#Get the first domain name from the list, which is what the cert will be listed as in /etc/letsencrypt/live
MAINDOMAIN_P=`echo -n $PUNYCODE | cut -d "," -f1` 
MAINDOMAIN=`echo -n $ALLDOMAINS | cut -d "," -f1`

I=0
while [[ $I -lt ${#USERLIST[@]} ]]
do
    USER=${USERLIST[$I]}
    DOMAINS=`echo -n ${DOMAINLIST[$I]} | tr "," " "`

    for DOMAIN in $DOMAINS
    do
        #Create a temp directory
        TMPLOC=/var/tmp/ssl-$MAINDOMAIN-$$
        mkdir $TMPLOC

        #Copy the Let's Encrypt Certs into it, using Vesta naming conventions
        cp /etc/letsencrypt/live/$MAINDOMAIN_P/cert.pem $TMPLOC/$DOMAIN.crt
        cp /etc/letsencrypt/live/$MAINDOMAIN_P/privkey.pem $TMPLOC/$DOMAIN.key
        cp /etc/letsencrypt/live/$MAINDOMAIN_P/chain.pem $TMPLOC/$DOMAIN.ca

        #Check if the site already has a cert
        HAS_CERT=`$VESTA_PATH/bin/v-list-web-domain-ssl $USER $DOMAIN`
        if [[ $HAS_CERT == '' ]]
        then
            #Configure SSL and install the cert
            $VESTA_PATH/bin/v-add-web-domain-ssl $USER $DOMAIN $TMPLOC
        else
            #Replace the existing cert with the new one
            $VESTA_PATH/bin/v-change-web-domain-sslcert $USER $DOMAIN $TMPLOC
        fi

        #Remove the temp directory
        rm -rf $TMPLOC
    done
    let "I=$I + 1"
done

#Restart the web servers
service httpd status >/dev/null 2>&1
if [[ $? -eq 0 ]]
then
    service httpd reload
fi

service apache2 status >/dev/null 2>&1
if [[ $? -eq 0 ]]
then
    service apache2 reload
fi

service nginx status >/dev/null 2>&1
if [[ $? -eq 0 ]]
then
    service nginx reload
fi

#Try to schedule renewals if the -a flag was specified
if [[ $RENEWALDAYS -gt 0 ]]
then
    # attempt to schedule autorenewals
    service atd status >/dev/null 2>&1
    if [[ $? -ne 0 ]]
    then
        echo "atd is not available.  Is it installed?  Renewals not scheduled."
        exit 144
    fi

    echo "$ORIGINALCMD" | $AT_COMMAND "now + $RENEWALDAYS days"
    if [[ $? -ne 0 ]]
    then
        echo "at returned an error status.  Renewals may not be scheduled.  Use atq to verify."
    else
        echo "Renewal scheduled for $RENEWALDAYS days."
    fi
fi
